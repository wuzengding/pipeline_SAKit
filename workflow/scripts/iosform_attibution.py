__usage__ = "Pipline SAKit which apply for indentification novel proteins generated by all kinds of mutation/FUSION/orf"
__author__ = "wuzengding@therarna.cn"
__date__ = "2022/08/18"
__version__ = "v1.0.0 wuzengding"
__update__ = ""

import os
import argparse
import time
import re
import sys
import pandas as pd


#Transcript2gene = config["transcript2gene"]
def attribute_ccs_read_counts( sqanti3_output, cupcake_collapsed_stat, event_type = "isoform"):
    #case_parameters = read_case_config( wd )
    ccs_counter = []
    if event_type == 'isoform':
        sep_squanti  = '\t'
        sep_stat = "\t"
        left_on = 'isoform'
    elif event_type == 'fusion':
        sep_squanti  = ','
        sep_stat = "\t"
        left_on = 'UniqueID'

    if os.path.exists( sqanti3_output ) and os.path.exists (cupcake_collapsed_stat):
        squant3_class_output_pd_df = pd.read_csv(sqanti3_output, sep = sep_squanti)
        cupcake_collapsed_stat_pd_df = pd.read_csv(cupcake_collapsed_stat, sep = sep_stat)
    else:
        raise Exception( "File not found {0} or {1}".format( sqanti3_output, cupcake_collapsed_stat))
    
    # Select full length reads only 
    is_fl = cupcake_collapsed_stat_pd_df["is_fl"] == "Y"
    cupcake_collapsed_stat_pd_df_fl = cupcake_collapsed_stat_pd_df[is_fl]
    cupcake_collapsed_stat_pd_df_fl_dedup = cupcake_collapsed_stat_pd_df_fl.groupby( ['pbid'])['id'].apply(', '.join).reset_index()
    result = pd.merge(squant3_class_output_pd_df, cupcake_collapsed_stat_pd_df_fl_dedup, left_on = left_on, right_on = 'pbid')
    for ccs in result['id'].values:
        ccs_counter.append(len(ccs.split(',')))

    result["CCS_Counts"]= ccs_counter
    return result



def geneid_to_gene_name(Transcript2gene):
    # Reading transcipt ids ensemble ids and gene names file
    #case_parameters = read_case_config()
    tr2g = Transcript2gene
    if os.path.exists(  tr2g ):
        tr2g_df = pd.read_table(tr2g,sep="\t")
    else:
        raise Exception(" No file found: {0}". format( tr2g ))
        
    tr2g_df.columns = ["gene","transcript","gene_name"]
    g2genename = tr2g_df[["gene", "gene_name"]]
    g2genename  = g2genename.drop_duplicates()

    return g2genename


def attribute_gene_names_isoforms(event_results_input,Transcript2gene):
    #print(event_results_input['attributed_gene'][1:10])
    gid2g={}
    geneid_to_gene_name_df =  geneid_to_gene_name(Transcript2gene)
    for gene, gene_name in zip(geneid_to_gene_name_df['gene'], geneid_to_gene_name_df['gene_name']):
        gid2g[gene_name]=gene
    #print(gid2g.keys())
    #print(gid2g.values())
    
    #print(gid2g["B3GALT6"])
    attributed_gene_id = []

    for geneid in event_results_input['associated_gene']:
        if type( geneid ) == str:
            if  not geneid.startswith("novelGene"):
                geneid_split = geneid.split('_')
                if len(geneid_split)==1:
                    try:
                        attributed_gene_id.append(gid2g[geneid])
                    except:
                        print(geneid)
                        attributed_gene_id.append(geneid )
                else:
                    g1 = geneid_split[0]
                    g2 = geneid_split[1]
                    if (g1 in gid2g.keys()) and (g2 in gid2g.keys()):
                        gene_pair = gid2g[g1] +'_' + gid2g[g2]
                    elif (g1 +"_"+ g2 in gid2g.keys()):
                        gene_pair = gid2g[g1 +"_"+ g2]

                    attributed_gene_id.append(gene_pair )
            else:
                attributed_gene_id.append(geneid )
        else:
                 attributed_gene_id.append("")
    
    event_results_input['attributed_gene_id'] = attributed_gene_id 

    return event_results_input

def filtered_out_lite_classification_isoforms(unfiltered_classification_file_pd , filtered_classification_file_pd ):
    #unfiltered_classification_file_pd = pd.read_csv(unfiltered_class_file_path, sep ="\t")
    #filtered_classification_file_pd = pd.read_csv(filtered_class_file_path, sep ="\t")
    filtered_out_isoforms = unfiltered_classification_file_pd[~unfiltered_classification_file_pd.isoform.isin(filtered_classification_file_pd.isoform)]
    return filtered_out_isoforms 

if __name__ == "__main__":
    data_start = time.time()
    print(time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())) + "atrribution of novel isoform")
    parser = argparse.ArgumentParser(description='attribution of isoform or fusion')
    parser.add_argument('-c','--collapsed_stat', help='Isoforms read statistic')
    parser.add_argument('-i','--isoform_class', help='Isoforms classification')
    parser.add_argument('-f','--isoform_class_filter', help='Isoforms classification filtered ')
    parser.add_argument('-t','--tr2gene', help='transcript to gene')
    parser.add_argument('-o','--output1', help="output path")
    parser.add_argument('-u','--output2', help="prefix of output files")
    
    args = parser.parse_args()
    collapsed_stat = args.collapsed_stat
    isoform_class = args.isoform_class
    isoform_class_filter = args.isoform_class_filter
    Transcript2gene = args.tr2gene
    output1 = args.output1
    output2 = args.output2
    
    #pythonpath = config["Env"]["python_lib"]
    event_results = attribute_ccs_read_counts( \
                      isoform_class_filter, 
                      collapsed_stat, 
                      event_type = "isoform" )
    
    print(event_results.head(10))
    event_results_unflitered = attribute_ccs_read_counts( \
                     isoform_class , 
                     collapsed_stat, 
                     event_type = "isoform" )
                     
    event_results_gene_names_added = attribute_gene_names_isoforms(event_results,Transcript2gene )

    event_results_unflitered_gene_names_added = attribute_gene_names_isoforms(event_results_unflitered, Transcript2gene )

    event_filtered_out_results =  filtered_out_lite_classification_isoforms( \
                                event_results_unflitered_gene_names_added ,\
                                event_results_gene_names_added )
    
    event_results_gene_names_added.to_csv( \
                                output1, 
                                sep ="\t", 
                                index =  False )
                                
    event_filtered_out_results.to_csv( \
                                output2, 
                                sep ="\t", 
                                index =  False )